{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","photos","setPhotos","useEffect","a","fetch","response","json","length","getPhotos","openLightbox","useCallback","event","photo","index","className","id","label","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSA4FeA,MAjDf,WACE,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACuBC,MAAM,gCAD7B,cACMC,EADN,gBAEmBA,EAASC,OAF5B,OAEED,EAFF,OAGEJ,EAAUI,GAHZ,4CADc,sBAOQ,IAAlBL,EAAOO,QAPI,WAAD,wBAQZC,MAIJ,IAAMC,EAAeC,uBAAY,SAACC,EAAD,GAA6B,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,MAChDhB,EAAgBgB,GAChBd,GAAgB,KACf,IAOH,OACE,sBAAKe,UAAU,MAAf,UACE,cAAC,IAAD,CAAWC,GAAG,iBAAiBC,MAAM,aACrC,cAAC,IAAD,CAAShB,OAAQA,EAAQiB,QAASR,IAClC,cAAC,IAAD,UACGX,EACC,cAAC,IAAD,CAAOoB,QAXO,WACpBrB,EAAgB,GAChBE,GAAgB,IASV,SACE,cAAC,IAAD,CACEoB,aAAcvB,EACdwB,MAAOpB,EAAOqB,KAAI,SAAAC,GAAC,kCACdA,GADc,IAEjBC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,eAIf,WC1EGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6d10837.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport './App.css';\n\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport TextField from '@material-ui/core/TextField';\n\n// var photos = require('./photos.json');\n// var simple_photos = require('./simple-photos.json')\n/*\nclass App extends Component {\n  state = {\n    photos: []\n  }\n\n  componentDidMount() {\n    fetch('http://127.0.0.1:5000/photos')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ photos: data })\n    })\n    .catch(console.log)\n  }\n\n  logit(foo) {\n    console.log(foo);\n    console.log(this);\n  }\n  \n  render() {\n      return (\n        <div className=\"App\">\n          <form noValidate autoComplete=\"off\">\n            <TextField id=\"standard-basic\" label=\"Standard\" />\n            <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\n            <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" />\n          </form>\n          <Gallery photos={this.state.photos} onClick={useCallback(logit, { photo, tweeturl })}/>\n        </div>\n    ) \n  }\n}\n*/\nfunction App() {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n  const [photos, setPhotos] = useState([]);\n\n  useEffect(() => {\n    async function getPhotos() {\n      let response = await fetch('http://127.0.0.1:5000/photos');\n      response = await response.json();\n      setPhotos(response)\n    }\n\n    if (photos.length === 0) {\n      getPhotos();\n    }\n  });\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <TextField id=\"standard-basic\" label=\"Standard\" />\n      <Gallery photos={photos} onClick={openLightbox} />\n      <ModalGateway>\n        {viewerIsOpen ? (\n          <Modal onClose={closeLightbox}>\n            <Carousel\n              currentIndex={currentImage}\n              views={photos.map(x => ({\n                ...x,\n                srcset: x.srcSet,\n                caption: x.title\n              }))}\n            />\n          </Modal>\n        ) : null}\n      </ModalGateway>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}