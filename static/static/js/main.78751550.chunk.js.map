{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","photos","setPhotos","initialValue","value","setValue","reset","bind","onChange","event","target","useInput","currentUrl","setCurrentUrl","getPhotos","a","fetch","encodeURI","response","json","useEffect","length","openLightbox","useCallback","photo","index","className","onSubmit","evt","preventDefault","id","helperText","style","margin","placeholder","fullWidth","InputLabelProps","shrink","variant","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAkGeA,MA3Ef,WACE,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEA,EArBsB,SAAAC,GACtB,MAA0BP,mBAASO,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,MAAO,CACLD,QACAC,WACAC,MAAO,kBAAMD,EAAS,KACtBE,KAAM,CACJH,QACAI,SAAU,SAAAC,GACRJ,EAASI,EAAMC,OAAON,UAWGO,CAAS,mDAAhCP,EAAR,EAAQA,MAAOG,EAAf,EAAeA,KAEf,GAFA,EAAqBD,MAEeV,mBAAS,oDAA7C,mBAAOgB,EAAP,KAAmBC,EAAnB,KAPa,SASEC,IATF,2EASb,4BAAAC,EAAA,sEAEuBC,MAAM,eAAiBC,UAAUb,IAFxD,cAEMc,EAFN,gBAGmBA,EAASC,OAH5B,OAGED,EAHF,OAIEL,EAAcT,GACdF,EAAUgB,GALZ,4CATa,sBAsBbE,qBAAU,WACc,IAAlBnB,EAAOoB,QACTP,OAIJ,IAAMQ,EAAeC,uBAAY,SAACd,EAAD,GAA6B,EAAnBe,MAAoB,IAAbC,EAAY,EAAZA,MAChD3B,EAAgB2B,GAChBzB,GAAgB,KACf,IAOH,OACE,sBAAK0B,UAAU,MAAf,UACE,sBAAMC,SAvBW,SAACC,GACpBA,EAAIC,iBACJf,KAqBE,SACE,cAAC,IAAD,aACIgB,GAAG,oBACHC,WAAW,4CACXC,MAAO,CAAEC,OAAQ,GACjBC,YAAY,kDACZC,WAAS,EACTF,OAAO,SACPG,gBAAiB,CACfC,QAAQ,GAEVC,QAAQ,YACJ/B,MAGV,oDAAuBK,KACvB,cAAC,IAAD,CAASX,OAAQA,EAAQsC,QAASjB,IAClC,cAAC,IAAD,UACGvB,EACC,cAAC,IAAD,CAAOyC,QA1BO,WACpB1C,EAAgB,GAChBE,GAAgB,IAwBV,SACE,cAAC,IAAD,CACEyC,aAAc5C,EACd6C,MAAOzC,EAAO0C,KAAI,SAAAC,GAAC,kCACdA,GADc,IAEjBC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,eAIf,WChFGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.78751550.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport './App.css';\n\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport TextField from '@material-ui/core/TextField';\n\nexport const useInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: event => {\n        setValue(event.target.value);\n      }\n    }\n  };\n};\n\nfunction App() {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n  const [photos, setPhotos] = useState([]);\n\n  const { value, bind, reset } = useInput('https://twitter.com/i/lists/1344411611960901637');\n\n  const [currentUrl, setCurrentUrl] = useState('https://twitter.com/i/lists/1344411611960901637')\n\n  async function getPhotos() {\n    // let response = await fetch('http://127.0.0.1:5000/photos?url=' + encodeURI(value));\n    let response = await fetch('/photos?url=' + encodeURI(value));\n    response = await response.json();\n    setCurrentUrl(value);\n    setPhotos(response);\n  }\n\n  const reloadPhotos = (evt) => {\n    evt.preventDefault();\n    getPhotos();\n  }\n\n  useEffect(() => {\n    if (photos.length === 0) {\n      getPhotos();\n    }\n  });\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={reloadPhotos}>\n        <TextField\n            id=\"filled-full-width\"\n            helperText=\"Paste a Twitter URL to extract its photos\"\n            style={{ margin: 8 }}\n            placeholder=\"https://twitter.com/i/lists/1344411611960901637\"\n            fullWidth\n            margin=\"normal\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            {...bind}\n          />\n      </form>\n      <p>currently viewing: {currentUrl}</p>\n      <Gallery photos={photos} onClick={openLightbox} />\n      <ModalGateway>\n        {viewerIsOpen ? (\n          <Modal onClose={closeLightbox}>\n            <Carousel\n              currentIndex={currentImage}\n              views={photos.map(x => ({\n                ...x,\n                srcset: x.srcSet,\n                caption: x.title\n              }))}\n            />\n          </Modal>\n        ) : null}\n      </ModalGateway>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}